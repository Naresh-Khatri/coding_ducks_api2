generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// model feedbacks {
// id           Int     @id @default(autoincrement())
// ui           Int
//   difficulty   Int
//   usefulness   Int
//   overall      Int
//   future_event Boolean
//   text         String? @db.VarChar(255)
//   user_id      Int?
//   users        users?  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
// }

// model submissions {
//   id           Int       @id @default(autoincrement())
//   user_id      Int
//   problem_id   Int
//   code         String
//   lang         String    @db.VarChar(10)
//   total_tests  Int
//   tests_passed Int
//   tests        Json      @db.Json
//   marks        Float
//   timestamp    DateTime? @default(now()) @db.Timestamp(6)
// }

model User {
  id           Int       @id @default(autoincrement())
  fullname     String    @db.VarChar(100)
  email        String    @unique @db.VarChar(100)
  roll         String    @unique @db.VarChar(12)
  googleUID    String    @unique @db.VarChar(30)
  photoURL     String    @db.VarChar(255)
  registeredAt DateTime? @default(now()) @db.Timestamp(6)
  lastLoginAt  DateTime? @db.Timestamp(6)
  username     String?   @unique @db.VarChar(30)
  files        File[]
  isAdmin      Boolean   @default(false)

  exams Exam[]

  followedBy User[]  @relation("UserFollows")
  following  User[]  @relation("UserFollows")
}

// model Follows {
//   follower    User  @relation("follower", fields: [followerId], references: [id])
//   followerId  Int
//   following   User  @relation("following", fields: [followingId], references: [id])
//   followingId Int
//   @@id([followerId, followingId])
// }

model File {
  id           Int       @id @default(autoincrement())
  user         User      @relation(fields: [userId], references: [id])
  userId       Int
  fileName     String
  code         String    @default("")
  lang         String
  lastModified DateTime? @db.Timestamp(6)
}

model Exam {
  id           Int       @id @default(autoincrement())
  title        String
  description  String
  coverImg     String
  startTime    DateTime? @db.Timestamp(6)
  endTime      DateTime? @db.Timestamp(6)
  duration     Int?
  marks        Float?
  slug         String    @unique
  // userId       Int
  // User         User      @relation(fields: [userId], references: [id])
  problems     Problem[]
  participants User[]
}

model Problem {
  id          Int          @id @default(autoincrement())
  order       Int          @default(1)
  title       String
  description String
  difficulty  String
  tags        String[]
  submissions Submission[]
  testCases   Json         @db.Json
  exam        Exam         @relation(fields: [examId], references: [id])
  examId      Int
  // TestCases   TestCases? @relation(fields: [testCasesId], references: [id])
  // testCasesId Int?
}

// model TestCases {
//   id         Int       @id @default(autoincrement())
//   problem_id Int
//   input      String
//   output     String
//   marks      Float
//   Problem    Problem[]
// }

model Submission {
  id           Int    @id @default(autoincrement())
  user_id      Int
  problem_id   Int
  code         String
  lang         String @db.VarChar(10)
  total_tests  Int
  tests_passed Int
  tests        Json   @db.Json
  marks        Float

  timestamp DateTime? @default(now()) @db.Timestamp(6)
  Problem   Problem?  @relation(fields: [problemId], references: [id])
  problemId Int?
}
