generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int       @id @default(autoincrement())
  fullname     String    @db.VarChar(100)
  email        String    @unique @db.VarChar(100)
  roll         String?   @unique @db.VarChar(12)
  googleUID    String    @unique @db.VarChar(30)
  photoURL     String    @db.VarChar(255)
  registeredAt DateTime? @default(now()) @db.Timestamp(6)
  lastLoginAt  DateTime? @db.Timestamp(6)
  username     String    @unique @db.VarChar(30)
  files        File[]
  bio          String?
  isAdmin      Boolean   @default(false)
  isNoob       Boolean   @default(true)

  exams Exam[]

  followedBy         User[]               @relation("UserFollows")
  following          User[]               @relation("UserFollows")
  ExerciseSubmission ExerciseSubmission[]
  Submission         Submission[]

  likedProblems     Problem[]        @relation("ProblemLikes")
  dislikedProblems  Problem[]        @relation("ProblemDislikes")
  problemComments   ProblemComment[]
  upvotedComments   ProblemComment[] @relation("CommentUpvotes")
  downvotedComments ProblemComment[] @relation("CommentDownvotes")

  messages Message[]
  Room     Room[]
  Feedback Feedback[]
}

model File {
  id           Int       @id @default(autoincrement())
  user         User      @relation(fields: [userId], references: [id])
  userId       Int
  fileName     String
  code         String    @default("")
  lang         String
  lastModified DateTime? @db.Timestamp(6)
}

model Exam {
  id           Int          @id @default(autoincrement())
  title        String
  description  String
  coverImg     String
  startTime    DateTime?    @db.Timestamp()
  endTime      DateTime?    @db.Timestamp()
  duration     Int?
  marks        Float?
  slug         String       @unique
  isBounded    Boolean      @default(false)
  warnOnBlur   Boolean      @default(false)
  problems     Problem[]
  participants User[]
  Submission   Submission[]

  active   Boolean    @default(false)
  Feedback Feedback[]
}

model ProblemTag {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  problems Problem[]
}

model Problem {
  id                Int                  @id @default(autoincrement())
  order             Int                  @default(1)
  title             String
  slug              String               @unique
  frontendProblemId Int?                 @unique
  description       String
  difficulty        String
  starterCode       String?
  starterCodes      ProblemStarterCode[]
  tags              ProblemTag[]
  submissions       Submission[]
  testCases         Json                 @db.Json

  likes    User[]           @relation("ProblemLikes")
  dislikes User[]           @relation("ProblemDislikes")
  comments ProblemComment[]

  exam   Exam? @relation(fields: [examId], references: [id])
  examId Int?
}

model ProblemStarterCode {
  id        Int     @id @default(autoincrement())
  lang      String
  code      String
  problemId Int
  problem   Problem @relation(references: [id], fields: [problemId])
}

model ProblemComment {
  id        Int      @id @default(autoincrement())
  problem   Problem  @relation(fields: [problemId], references: [id])
  problemId Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  text      String
  time      DateTime @default(now()) @db.Timestamp(6)

  upvotes   User[] @relation("CommentUpvotes")
  downvotes User[] @relation("CommentDownvotes")
}

model Submission {
  id           Int     @id @default(autoincrement())
  code         String
  lang         String  @db.VarChar(10)
  total_tests  Int
  tests_passed Int
  tests        Json    @db.Json
  marks        Float
  isAccepted   Boolean @default(false)

  timestamp DateTime @default(now()) @db.Timestamp(6)

  Exam      Exam    @relation(fields: [examId], references: [id])
  examId    Int     @default(2)
  Problem   Problem @relation(fields: [problemId], references: [id])
  problemId Int
  userId    Int
  User      User    @relation(fields: [userId], references: [id])
}

model Exercise {
  id          Int      @id @default(autoincrement())
  createdBy   Int
  createdOn   DateTime @default(now()) @db.Timestamp(6)
  description String

  cover_img   String
  sections    Json[]
  answers     String[]
  submissions ExerciseSubmission[]
}

model ExerciseSubmission {
  id         Int      @id @default(autoincrement())
  exerciseID Int
  exercise   Exercise @relation(fields: [exerciseID], references: [id])
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
}

//add allowed users
model Room {
  id         Int       @id @default(autoincrement())
  name       String    @unique
  isPublic   Boolean   @default(true)
  lang       String    @default("py")
  content    String    @default("print('hello world')")
  owner      User      @relation(fields: [ownerId], references: [id])
  ownerId    Int
  created_at DateTime  @default(now()) @db.Timestamp(6)
  messages   Message[]
}

model Message {
  id       Int      @id @default(autoincrement())
  username String
  photoURL String
  text     String
  room     Room     @relation(fields: [roomId], references: [id])
  roomId   Int
  user     User     @relation(fields: [userId], references: [id])
  userId   Int
  time     DateTime @default(now()) @db.Timestamp(6)
}

model Feedback {
  id                     Int      @id @default(autoincrement())
  examId                 Int
  exam                   Exam     @relation(fields: [examId], references: [id])
  userId                 Int
  user                   User     @relation(fields: [userId], references: [id])
  difficulty             Int
  ui                     Int
  usefulness             Int
  overall                Int
  interestInFutureEvents Boolean
  comment                String?
  time                   DateTime @default(now()) @db.Timestamp(6)
}
